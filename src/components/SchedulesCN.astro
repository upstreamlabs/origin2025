---
// Packages
import { Picture } from "astro:assets"
import type { ImageMetadata } from "astro"

// Components
import SocialShare from "./SocialShare.astro"

interface Speaker {
  id: string
  name: string
  roleOrg: string
  tags: string[]
  image: string
}

interface Session {
  date: string
  timeSlot: string
  title: string
  content: string
  speakers: Speaker[]
  category?: string
  isSpecialEvent?: boolean
}

interface Props {
  currentDay?: string
  activeCategory?: string
}

// Import the Chinese schedule data
import scheduleData from "json/ScheduleCN.json"

// Import all images
const images = import.meta.glob<{ default: ImageMetadata }>(
  "images/speakers/*.{jpeg,jpg,png,gif}"
)

// Use the provided props or default values
const { currentDay = "9月13日", activeCategory = "All" } = Astro.props

// Helper function to get category name from tag ID
const getCategoryNameFromTag = (tagId: string): string => {
  const category = scheduleData.categories.find((cat) => cat.id === tagId)
  return category ? category.name : tagId
}

// Improved function to sort sessions by time
const sortSessionsByTime = (sessions: Session[]) => {
  return sessions.sort((a, b) => {
    // Extract start times from timeSlot
    const [aStartTime] = a.timeSlot.split("-")
    const [bStartTime] = b.timeSlot.split("-")

    // Split hours and minutes
    const [aHour, aMinute] = aStartTime.split(":").map(Number)
    const [bHour, bMinute] = bStartTime.split(":").map(Number)

    // Compare times
    return aHour * 60 + aMinute - (bHour * 60 + bMinute)
  })
}

// Prepare all sessions for the current day
const allSessions: Session[] = Object.entries(scheduleData.sessions).flatMap(
  ([categoryName, categorySessions]) =>
    categorySessions
      .filter((session: Session) => session.date === currentDay)
      .map((session) => ({
        ...session,
        category:
          scheduleData.categories.find((cat) => cat.id === categoryName)
            ?.name || categoryName,
        isSpecialEvent:
          session.title === "主题演讲" ||
          session.title === "午餐" ||
          session.title === "下午茶歇" ||
          session.title === "展示与分享"
      }))
)

// Remove duplicates from all sessions while preserving the first occurrence
const uniqueAllSessions = Array.from(
  new Map(allSessions.map((session) => [session.title, session])).values()
)

const sortedAllSessions = sortSessionsByTime(uniqueAllSessions)

// Helper function to generate event URL
const getEventUrl = (title: string): string => {
  // Get the current URL origin (domain)
  const origin = Astro.url.origin;
  // Create the full URL with domain
  return `${origin}/cn/agenda/${title.toLowerCase().replace(/\s+/g, "-")}/`;
}
---

<section
  class="section section-agenda-grid"
  id="grid"
  data-filter-section
  data-theme-section="light"
  data-bg-section="light"
  data-scroll-section
  style="margin-top: 4rem;"
>
  <div class="container">
    <div class="row row-list accordion visible">
      <div class="list-group">
        {
          sortedAllSessions.length > 0 ? (
            <ul class="row row-list">
              {sortedAllSessions.map((session: Session) => (
                <li
                  class={`single-agenda-card single-accordion-item card-hover ${session.isSpecialEvent ? 'special-event' : ''}`}
                  data-accordion-status="not-active"
                  data-filter-status="active"
                  data-filter-category="All"
                >
                  <div
                    class="top"
                    data-accordion-toggle={
                      session.speakers.length > 0 || session.content
                        ? true
                        : null
                    }
                  >
                    <div class="left">
                      <div class="timeslot">
                        <p class="timedate">{session.date}</p>
                        <p>{session.timeSlot}</p>
                      </div>
                      <h2 class="h5">{session.title}</h2>
                    </div>
                  </div>
                  {(session.speakers.length > 0 || session.content) && (
                    <div class="bottom">
                      <div class="bottom-wrap">
                        <div class="bottom-content">
                          {session.content && (
                            <div
                              class="card-row styled-content"
                              set:html={session.content}
                            />
                          )}
                          
                          <!-- Wrap speakers and social share in a single container -->
                          <div class="speakers-and-share-container">
                            {session.speakers.length > 0 && (
                              <div class="card-row card-row-speakers">
                                {session.speakers.map((speaker: Speaker) => (
                                  <div class="card-col">
                                    <div class="single-speakers-card">
                                      <div class="card-row card-row-image">
                                        <div class="card-image">
                                          {speaker?.image &&
                                            images[
                                              `/public/images/speakers/${speaker.image}`
                                            ] && (
                                              <Picture
                                                src={images[
                                                  `/public/images/speakers/${speaker.image}`
                                                ]()}
                                                formats={["webp", "jpg"]}
                                                alt={speaker.name}
                                                class="overlay"
                                                widths={[
                                                  275, 400, 500, 600, 750, 900,
                                                ]}
                                                sizes="(max-width: 700px) 58vw, 450px"
                                              />
                                            )}
                                        </div>
                                      </div>
                                      <div class="card-row card-row-info">
                                        <h3 class="h5">{speaker.name}</h3>
                                        <p>{speaker.roleOrg}</p>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                            
                            <!-- Social share component with reduced spacing -->
                            <div class="social-share-row">
                              <SocialShare 
                                title={`${session.title} - 开放共创·可持续发展大会 2025`}
                                url={getEventUrl(session.title)}
                                description={session.content ? session.content.replace(/<[^>]*>/g, "").substring(0, 160) : ""}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </li>
              ))}
            </ul>
          ) : (
            <p>当天没有安排会议</p>
          )
        }
      </div>
      <p style="text-align: center; margin: 1rem 0;">
        议程如有变动，恕不另行通知
      </p>
    </div>
  </div>
</section>

<style>
  .speakers-and-share-container {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .social-share-row {
    margin-top: 0.25rem;
    padding-top: 0.25rem;
    border-top: 1px solid #eee;
  }
</style>